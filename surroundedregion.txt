class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def dfs(i,j,m,n):
            if i<0 or j<0 or i>=m or j>=n or board[i][j]!='O':
                return;
            board[i][j]='#'
            dfs(i+1,j,m,n)
            dfs(i-1,j,m,n)
            dfs(i,j+1,m,n)
            dfs(i,j-1,m,n)
        if not board:
            return ;
        m=len(board)
        n=len(board[0])
        for i in range(m):
            if board[i][0]=='O':
                dfs(i,0,m,n)
            if board[i][n-1]=='O':
                dfs(i,n-1,m,n)
        for i in range(n):
            if board[0][i]=='O':
                dfs(0,i,m,n)
            if board[m-1][i]=='O':
                dfs(m-1,i,m,n)
        for i in range(m):
            for j in range(n):
                if board[i][j]=='O':
                    board[i][j]='X'
                if board[i][j]=='#':
                    board[i][j]='O'